{
	"preprocessing": {
		"scope": "python",
		"prefix": "@decorator.preprocessing",
		"body": [
			"@decorator.preprocessing",
			"def preprocessing(${1:maze,}${2:maze_width,}${3:maze_height,}${4:name,}${5:teams,}${6:player_locations,}${7:cheese,}${8:possible_actions,}${9:memory,}):",
			"\t$BLOCK_COMMENT_START This function is called once at the beginning of the game.\n",
			"\tIt is typically given more time than the turn function, to perform complex computations.",
			"\tStore the results of these computations in the provided memory to reuse them later",
			"\tduring turns. To do so, you can crete entries in the memory dictionary as ",
			"\tmemory.my_key = my_value.\n",
			"\tParameters\n\t----------",
			"\t${1/,/ : Union[np.ndarray, Dict[int, Dict[int, int]]]\n\t\tMap of the maze, as data type described by PyRat's 'maze_representation' option.",
			"\t/}${2/,/ : int\n\t\tWidth of the maze in number of cells.",
			"\t/}${3/,/ : int\n\t\tHeight of the maze in number of cells.",
			"\t/}${4/,/ : str\n\t\tName of the player controlled by this function.",
			"\t/}${5/,/ : Dict[str, List[str]]\n\t\tRecap of the teams of players.",
			"\t/}${6/,/ : Dict[str, int]\n\t\tLocations for all players in the game.",
			"\t/}${7/,/ : List[int]\n\t\tList of available pieces of cheese in the maze.",
			"\t/}${8/,/ : List[str]\n\t\tList of possible actions.",
			"\t/}${9/,/ : threading.local\n\t\tLocal memory to share information between preprocessing, turn and postprocessing./}",
			"\t$BLOCK_COMMENT_END",
			"\t${0:# Put your code here}\n"
		],
		"description": "Decorator that removes parameters that are not used by preprocessing"
	},
	"postprocessing": {
		"scope": "python",
		"prefix": "@decorator.postprocessing",
		"body": [
			"@decorator.postprocessing",
			"def postprocessing(${1:maze,}${2:maze_width,}${3:maze_height,}${4:name,}${5:teams,}${6:player_locations,}${7:player_scores,}${8:player_muds,}${9:cheese,}${10:possible_actions,}${11:memory,}${12:stats,}):",
			"\t$BLOCK_COMMENT_START This function is called once at the end of the game.\n",
			"\tIt is not timed, and can be used to make some cleanup, analyses of the completed game",
			"\tmodel training, etc.\n",
			"\tParameters\n\t----------",
			"\t${1/,/ : Union[np.ndarray, Dict[int, Dict[int, int]]]\n\t\tMap of the maze, as data type described by PyRat's 'maze_representation' option.",
			"\t/}${2/,/ : int\n\t\tWidth of the maze in number of cells.",
			"\t/}${3/,/ : int\n\t\tHeight of the maze in number of cells.",
			"\t/}${4/,/ : str\n\t\tName of the player controlled by this function.",
			"\t/}${5/,/ : Dict[str, List[str]]\n\t\tRecap of the teams of players.",
			"\t/}${6/,/ : Dict[str, int]\n\t\tLocations for all players in the game.",
			"\t/}${7/,/ : Dict[str, float]\n\t\tScores for all players in the game.",
			"\t/}${8/,/ : Dict[str, Dict[str, Union[None, int]]]\n\t\tIndicates which player is currently crossing mud.",
			"\t/}${9/,/ : List[int]\n\t\tList of available pieces of cheese in the maze.",
			"\t/}${10/,/ : List[str]\n\t\tList of possible actions.",
			"\t/}${11/,/ : threading.local\n\t\tLocal memory to share information between preprocessing, turn and postprocessing.",
			"\t/}${12/,/ : Dict[str, Any]\n\t\tGame statistics computed during the game./}",
			"\t$BLOCK_COMMENT_END",
			"\t${0:# Put your code here}\n"
		],
		"description": "Decorator that removes parameters that are not used by postprocessing"
	},
	"turn": {
		"scope": "python",
		"prefix": "@decorator.turn",
		"body": [
			"@decorator.turn",
			"def turn(${1:maze,}${2:maze_width,}${3:maze_height,}${4:name,}${5:teams,}${6:player_locations,}${7:player_scores,}${8:player_muds,}${9:cheese,}${10:possible_actions,}${11:memory,}):",
			"\t$BLOCK_COMMENT_START This function is called at every turn of the game and should return an action",
			"\twithin the set of possible actions.\n",
			"\tYou can access the memory you stored during the preprocessing function",
			"\tby doing memory.my_key. You can also update the existing memory with new information,",
			"\tor create new entries as memory.my_key = my_value.\n",
			"\tParameters\n\t----------",
			"\t${1/,/ : Union[np.ndarray, Dict[int, Dict[int, int]]]\n\t\tMap of the maze, as data type described by PyRat's 'maze_representation' option.",
			"\t/}${2/,/ : int\n\t\tWidth of the maze in number of cells.",
			"\t/}${3/,/ : int\n\t\tHeight of the maze in number of cells.",
			"\t/}${4/,/ : str\n\t\tName of the player controlled by this function.",
			"\t/}${5/,/ : Dict[str, List[str]]\n\t\tRecap of the teams of players.",
			"\t/}${6/,/ : Dict[str, int]\n\t\tLocations for all players in the game.",
			"\t/}${7/,/ : Dict[str, float]\n\t\tScores for all players in the game.",
			"\t/}${8/,/ : Dict[str, Dict[str, Union[None, int]]]\n\t\tIndicates which player is currently crossing mud.",
			"\t/}${9/,/ : List[int]\n\t\tList of available pieces of cheese in the maze.",
			"\t/}${10/,/ : List[str]\n\t\tList of possible actions.",
			"\t/}${11/,/ : threading.local\n\t\tLocal memory to share information between preprocessing, turn and postprocessing.",
			"/}\n\tReturns\n\t-------",
			"\tstr\n\t\tThe action taken by the program (one of ``possible_actions``).",
			"\t$BLOCK_COMMENT_END",
			"\t${0:# Put your code here}\n"
		],
		"description": "Decorator that removes parameters that are not used by turn"
	}
}
